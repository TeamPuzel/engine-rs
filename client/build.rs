use std::fs;

fn main() {
    let sprites = fs::read_dir("./sprites").unwrap();
    let mut buf = "// This file is autogenerated.\nuse super::engine::types::{Sprite, Color::*};".to_string();
    for sprite in sprites {
        let path = sprite.unwrap().path();
        let file = fs::read_to_string(&path).unwrap();
        let name = path
            .file_name().unwrap()
            .to_str().unwrap()
            .split('.')
            .collect::<Vec<&str>>()[0]
            .to_uppercase();
        
        buf.push_str(&format!("\npub const {name}: Sprite = [\n"));
        
        for line in file.lines() {
            buf.push_str("    [");
            for color in line.split(' ') {
                buf.push_str(str_to_color(&color));
                buf.push_str(", ");
            }
            buf.push_str("],\n");
        }
        
        buf.push_str("];\n");
        fs::write("./src/sprites.rs", &buf).unwrap();
    }
}

fn str_to_color(str: &str) -> &'static str {
    match str {
        "0"  => "Black",
        "1"  => "DarkBlue",
        "2"  => "DarkPurple",
        "3"  => "DarkGreen",
        "4"  => "Brown",
        "5"  => "DarkGray",
        "6"  => "LightGray",
        "7"  => "White",
        "8"  => "Red",
        "9"  => "Orange",
        "10" => "Yellow",
        "11" => "Green",
        "12" => "Blue",
        "13" => "Lavender",
        "14" => "Pink",
        "15" => "LightPeach",
        _ => panic!("Invalid color")
    }
}